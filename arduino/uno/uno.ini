
// Biến điều khiển di chuyển tạm thời
bool isExecuting = false;
char currentCommand = 'S';
unsigned long startTime = 0;
const unsigned long moveDuration = 500; // Thời gian di chuyển: 0.5 giây

// Định nghĩa chân động cơ (2 động cơ qua L298N)
const int in1 = 8;  // Động cơ trái (IN1)
const int in2 = 9;  // Động cơ trái (IN2)
const int in3 = 10; // Động cơ phải (IN3)
const int in4 = 11; // Động cơ phải (IN4)

// Chân cảm biến siêu âm
const int trigPin = A0;
const int echoPin = A1;

// Chân LED
const int greenLED = 4; // Green LED trên chân 4
const int redLED = 3;   // Red LED trên chân 3
const int blueLED = 5;  // Blue LED trên chân 5

void setup() {
  Serial.begin(9600);
  delay(1000);

  // Cấu hình chân động cơ
  pinMode(in1, OUTPUT); pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT); pinMode(in4, OUTPUT);

  // Cấu hình chân cảm biến siêu âm
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Cấu hình chân LED
  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(blueLED, OUTPUT);
  updateLEDs();

  Serial.println("Setup complete, waiting for commands...");
}

void loop() {
  float distance = measureDistance();

  // Phát hiện vật cản (dưới 20cm)
  if (distance > 0 && distance < 20) {
    moveBackward(); // Lùi khi gặp vật cản
    delay(500);     // Lùi trong 0.5 giây
    turnRight90();  // Quay 90 độ
    delay(500);     // Thời gian để hoàn thành quay
    stopMoving();   // Dừng tạm thời
    delay(200);     // Dừng ngắn để ổn định
    moveForward();  // Tiếp tục tiến
    delay(500);     // Tiến trong 0.5 giây
    stopMoving();   // Dừng sau khi di chuyển
  }

  // Nhận lệnh từ ESP32-CAM
  if (Serial.available() > 0) {
    char incoming = Serial.read();
    Serial.print("Received: ");
    Serial.print((int)incoming);
    Serial.print(" (char: ");
    if (incoming >= 32 && incoming <= 126) {
      Serial.print(incoming);
    } else {
      Serial.print("non-printable");
    }
    Serial.println(")");

    if (incoming == 'F' || incoming == 'B' || incoming == 'L' || incoming == 'R' || incoming == 'S') {
      currentCommand = incoming;
      isExecuting = true;
      startTime = millis(); // Bắt đầu thời gian di chuyển
      Serial.print("Executing command: ");
      Serial.println(currentCommand);
      updateLEDs();
    } else {
      Serial.println("Invalid command ignored");
    }
  }

  // Thực thi di chuyển tạm thời
  if (isExecuting) {
    if (millis() - startTime < moveDuration) {
      if (currentCommand == 'F') moveForward();
      else if (currentCommand == 'B') moveBackward();
      else if (currentCommand == 'L') moveLeft();
      else if (currentCommand == 'R') moveRight();
      else stopMoving();
    } else {
      stopMoving();
      isExecuting = false;
      updateLEDs();
      Serial.println("Command completed, stopped.");
    }
  }
  delay(10);
}

// === Hàm điều khiển di chuyển (sửa F = tiến, B = lùi) ===
void moveForward() {
  // Tiến (động cơ cùng hướng)
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);   // Trái tiến
  digitalWrite(in3, LOW);  digitalWrite(in4, HIGH);  // Phải tiến
}

void moveBackward() {
  // Lùi (động cơ cùng hướng)
  digitalWrite(in1, LOW);  digitalWrite(in2, HIGH);  // Trái lùi
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);   // Phải lùi
}

void moveLeft() {
  // Quay trái (động cơ ngược hướng)
  digitalWrite(in1, LOW);  digitalWrite(in2, HIGH);  // Trái lùi
  digitalWrite(in3, LOW);  digitalWrite(in4, HIGH);  // Phải tiến
}

void moveRight() {
  // Quay phải (động cơ ngược hướng)
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);   // Trái tiến
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);   // Phải lùi
}

void stopMoving() {
  digitalWrite(in1, LOW); digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); digitalWrite(in4, LOW);
}

// === Xoay 90° phải (động cơ ngược hướng) ===
void turnRight90() {
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);   // Trái tiến
  digitalWrite(in3, LOW);  digitalWrite(in4, HIGH);  // Phải lùi
  // Thời gian quay 90° phụ thuộc vào tốc độ động cơ
}

// === Đo khoảng cách ===
float measureDistance() {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000);
  if (duration == 0) return -1;
  return duration * 0.034 / 2;
}

// === Điều khiển LED ===
void updateLEDs() {
  if (currentCommand == 'S' || !isExecuting) {
    digitalWrite(greenLED, LOW);
    digitalWrite(blueLED, LOW);  // Tắt Blue LED khi dừng
    digitalWrite(redLED, HIGH);
  } else {
    digitalWrite(greenLED, HIGH);
    digitalWrite(blueLED, HIGH); // Bật Blue LED khi di chuyển
    digitalWrite(redLED, LOW);
  }
}
